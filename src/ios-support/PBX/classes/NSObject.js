
/** List of subclasses */
var Subclasses = {}

/**
 * Represents an Objective-C object which is serializable to/from an archive.
 */
module.exports = class NSObject {

    /** Class name, must be overwritten by subclasses */
    static get className() {
        return 'NSObject'
    }

    /** Constructor */
    constructor() {

        /** List of properties which are ignored */
        this.ignoredPropertyNames = []

        /** Autogenerated instance ID */
        this.serializationID = null // TODO

    }

    /** Register a subclass type */
    static registerSubclass(Class) {
        Subclasses[Class.className] = Class
    }

    /** Register a subclass */
    static registerClass() {
        Subclasses[this.className] = this
    }

    /** Fetch a class */
    static class(name) {
        if (name == 'NSObject') return NSObject
        return Subclasses[name]
    }

    /** Deserialize the data into an instance of this class */
    static deserialize(data) {

        // Get class instance
        let Class = this

        // Create instance
        let instance = new Class()

        // Copy properties
        for (let propertyName in data)
            instance[propertyName] = data[propertyName]

        // Done
        return instance

    }

    /** Get value for key. Also handles the case of other objects being used as keys. */
    valueForKey(key) {

        // Check if key is an object
        if (key && key.serializationID)
            key = key.serializationID

        // Return value
        return this[key]

    }

    /** Set value for key. Also handles the case of other objects being used as keys. */
    setValueForKey(key, value) {

        // Check if key is an object
        if (key && key.serializationID)
            key = key.serializationID

        // Return value
        this[key] = value

    }

}